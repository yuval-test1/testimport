/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeleteYyyArgs } from "./DeleteYyyArgs";
import { YyyCountArgs } from "./YyyCountArgs";
import { YyyFindManyArgs } from "./YyyFindManyArgs";
import { YyyFindUniqueArgs } from "./YyyFindUniqueArgs";
import { Yyy } from "./Yyy";
import { YyyService } from "../yyy.service";
@graphql.Resolver(() => Yyy)
export class YyyResolverBase {
  constructor(protected readonly service: YyyService) {}

  async _yyysMeta(
    @graphql.Args() args: YyyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Yyy])
  async yyys(@graphql.Args() args: YyyFindManyArgs): Promise<Yyy[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Yyy, { nullable: true })
  async yyy(@graphql.Args() args: YyyFindUniqueArgs): Promise<Yyy | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Yyy)
  async deleteYyy(@graphql.Args() args: DeleteYyyArgs): Promise<Yyy | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
